version: '0.0.0'
SciViz:
  auth: false
  pages:
    Home:
      route: /table
      grids:
        grid1:
          type: fixed
          columns: 1
          row_height: 200
          components:
            compute description:
              x: 0
              y: 0
              height: 2
              width: 1
              type: markdown
              text: |
                ## Compute Table Description

                Record of worker instance uptime in hours used by each customer. Table can show up to previous 5 days of data

                **Organization**: Orgnization of the worker

                **Workflow**: Workflow of the worker

                **Type**: EC2 instance type of worker

                **Product**: Currently using just pipeline

                **Timestamp**: Time the worker data is inputted into the table

                **Modality**: Currently NULL (work with datascience team to break data up by modalities)

                **EC2**: Number of hours the worker has been running
            compute:
              route: /compute
              x: 0
              y: 2
              height: 2
              width: 1
              type: djtable
              # link: /session
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(clpitani_commandcenter):
                    q = clpitani_commandcenter.AwsCompute().proj(..., ec2_cost='ec2 * 1.204')
                    return dict(query=q, fetch_args=[])
            storage description:
              x: 0
              y: 4
              height: 2
              width: 1
              type: markdown
              text: |
                ## Storage Table Description

                Record of storage usage in RDS and S3 in GB by each customer. 

                **Organization**: Orgnization 

                **Workflow**: Workflow 

                **Product**: Currently using just pipeline

                **Timestamp**: Time the storage data is inputted into the table

                **Modality**: Currently NULL (work with datascience team to break data up by modalities)

                **RDS**: Amount of storage in bytes the worflow is taking up in RDS

                **S3**: Amount of storage in bytes the workflow is taking up in S3
            storage:
              route: /storage
              x: 0
              y: 6
              height: 3
              width: 1
              type: djtable
              # link: /session
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(clpitani_commandcenter):
                    q = clpitani_commandcenter.AwsStorage().proj(..., rds_cost='round(rds * 0.115, 2)', s3_cost='round(s3 * 0.023, 2)')
                    return dict(query=q, fetch_args=[])
      
          
